[{"path":[]},{"path":"https://gradebook-dev.github.io/gradebook/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://gradebook-dev.github.io/gradebook/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://gradebook-dev.github.io/gradebook/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing","title":"Contributing","text":"Contributions gradebook whether form bug fixes, issue reports, new code documentation improvements encouraged welcome. welcome novices may never contributed package well friendly veterans looking help us improve package users. eager include accepting contributions everyone meets code conduct guidelines. Please use GitHub issues. pull request, please link open corresponding issue GitHub issues. Please ensure notifications turned respond questions, comments needed changes promptly.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/CONTRIBUTING.html","id":"tests","dir":"","previous_headings":"","what":"Tests","title":"Contributing","text":"gradebook uses testthat testing. Please try provide 100% test coverage submitted code always check existing tests continue pass. beginner need help writing test, mention issue try help. ’s also helpful run goodpractice::gp() ensure lines code 80 characters lines code tests written. Please prior submitting pull request fix suggestions . Reach us need assistance .","code":""},{"path":"https://gradebook-dev.github.io/gradebook/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"","what":"Code style","title":"Contributing","text":"Please use snake case (rep_sample_n) function names. Besides , general follow tidyverse style R.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing","text":"contributing gradebook package must follow code conduct defined CONDUCT.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://gradebook-dev.github.io/gradebook/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://gradebook-dev.github.io/gradebook/articles/complex-syllabus.html","id":"syllabus","dir":"Articles","previous_headings":"","what":"Syllabus","title":"Case Study: Complex Syllabus","text":"final student’s grade computed 1) labs, 2) midterm exam 3) final exam. grade computed follows: Lab 1, Lab 2, Lab 3 aggregated equally example: Lab 1.1 worth 15 points Lab 1.2 worth 5 points, Lab 1.1 accounts 75% Lab 1 score. lowest 1 assignment dropped 10% reduction score, assignment submitted late within 24 hours deadline 30% reduction score, assignment submitted 24 hours deadline deadline Midterm 40% Final Exam 40%","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/complex-syllabus.html","id":"policy-file","dir":"Articles","previous_headings":"","what":"Policy File","title":"Case Study: Complex Syllabus","text":"policy file looks like:","code":"coursewide:   course: Stat 101 Complex Syllabus   description: This is the description for a course with a complex syllabus  categories:   - category: Overall Grade     aggregation: weighted_mean     assignments:     - category: Labs       weight: 0.40       drop_n_lowest: 1       aggregation: equally_weighted       assignments:       - category: Lab 1         lateness:         - between:            from: '00:00:01'            to: '24:00:00'         - scale_by: 0.9         - after: '24:00:01'         - scale_by: 0.7         aggregation: weighted_by_points         assignments:         - \"Lab 1.1\"         - \"Lab 1.2\"       - category: Lab 2         lateness:         - between:            from: '00:00:01'            to: '24:00:00'         - scale_by: 0.9         - after: '24:00:01'         - scale_by: 0.7         aggregation: weighted_by_points         assignments:         - \"Lab 2.1\"         - \"Lab 2.2\"       - category: Lab 3         lateness:         - between:            from: '00:00:01'            to: '24:00:00'         - scale_by: 0.9         - after: '24:00:01'         - scale_by: 0.7         aggregation: weighted_by_points         assignments:         - \"Lab 3.1\"         - \"Lab 3.2\"     - category: Midterm       weight: 0.20       aggregation: none       assignments:       - \"Midterm Exam\"     - category: Final       weight: 0.40       aggregation: none       assignments:       - \"Final Exam\""},{"path":"https://gradebook-dev.github.io/gradebook/articles/complex-syllabus.html","id":"gradescope-assigments-file","dir":"Articles","previous_headings":"","what":"Gradescope Assigments File","title":"Case Study: Complex Syllabus","text":"gradescope assignments file looks like:","code":"complex_syllabus_data <- read_gs(system.file(\"extdata\", \"complex_syllabus_data.csv\", package = \"gradebook\"))"},{"path":"https://gradebook-dev.github.io/gradebook/articles/complex-syllabus.html","id":"workflow","dir":"Articles","previous_headings":"","what":"Workflow","title":"Case Study: Complex Syllabus","text":"Overall grade calculated using three categories, weights shown ; represented Overall Grade aggregation weighted_mean. Midterm Final Exam categories contain single assignment, shown complex_syllabus_data file, usually downloaded gradescope. Labs category compiled 3 nested categories: “Lab 1”, “Lab 2”, “Lab 3”, 2 corresponding assignments: “Lab 1.1”, “Lab 1.2”, “Lab 2.1”, “Lab 2.2”, “Lab 3.1”, “Lab 3.2”.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/complex-syllabus.html","id":"grade-calculations","dir":"Articles","previous_headings":"Workflow","what":"Grade Calculations","title":"Case Study: Complex Syllabus","text":"First, read YAML policy file. process_policy() checks formatting policy file. ,reconcile_policy_with_gs() checks compatibility Gradescope file (complex_syllabus_data) policy file (policy). Finally, get_grades() grades assignments based policy file. output grades looks like:","code":"complex_syllabus_data <- read_gs(system.file(\"extdata\", \"complex_syllabus_data.csv\", package = \"gradebook\"))  policy <- read_policy(system.file(\"extdata\", \"complex_syllabus.yaml\", package = \"gradebook\"))  grades <- get_grades(policy = policy, gs = complex_syllabus_data)"},{"path":"https://gradebook-dev.github.io/gradebook/articles/complex-syllabus.html","id":"syllabus-as-a-grading-script","dir":"Articles","previous_headings":"","what":"Syllabus as a Grading Script","title":"Case Study: Complex Syllabus","text":"coded version syllabus. , can see, computations align. Disclaimers: weight category aggregation weighted_mean corresponding order assignments. Categories name assignment name.","code":"#function to convert HH:MM:SS into minutes convert_to_min <- function(hms){   purrr::map_vec(hms, function(time){     units <- stringr::str_split(time, pattern = \":\") |>       unlist() |>       as.numeric()     sum(units*c(60,1,1/60))   }) }  # function to implement lateness policy lateness_penalty <- function(score_vec, lateness_vec){   lateness <- convert_to_min(lateness_vec)   dplyr::case_when(     lateness == 0 ~ score_vec,     lateness <= 1440 ~ 0.9*score_vec,     .default = 0.7*score_vec   ) }  #function to drop lowest two grades one_drop <- function(data){   apply(dplyr::select(data, `Lab 1`, `Lab 2`, `Lab 3`), 1, function(x) sort(x, decreasing = TRUE)[1:2]) |> t() }  lab_grades_with_lateness <- complex_syllabus_data |>   # calculate percentages   dplyr::mutate(     `Lab 1.1` = `Lab 1.1`/`Lab 1.1 - Max Points`,     `Lab 1.2` = `Lab 1.2`/`Lab 1.2 - Max Points`,     `Lab 2.1` = `Lab 2.1`/`Lab 2.1 - Max Points`,     `Lab 2.2` = `Lab 2.2`/`Lab 2.2 - Max Points`,     `Lab 3.1` = `Lab 3.1`/`Lab 3.1 - Max Points`,     `Lab 3.2` = `Lab 3.2`/`Lab 3.2 - Max Points`,     `Midterm Exam` = `Midterm Exam`/`Midterm Exam - Max Points`,     `Final Exam` = `Final Exam`/`Final Exam - Max Points`   ) |>   #lateness   dplyr::mutate(     `Lab 1.1` = lateness_penalty(`Lab 1.1`,`Lab 1.1 - Lateness (H:M:S)`),     `Lab 1.2` = lateness_penalty(`Lab 1.2`,`Lab 1.2 - Lateness (H:M:S)`),     `Lab 2.1` = lateness_penalty(`Lab 2.1`,`Lab 2.1 - Lateness (H:M:S)`),     `Lab 2.2` = lateness_penalty(`Lab 2.2`,`Lab 2.2 - Lateness (H:M:S)`),     `Lab 3.1` = lateness_penalty(`Lab 3.1`,`Lab 3.1 - Lateness (H:M:S)`),     `Lab 3.2` = lateness_penalty(`Lab 3.2`,`Lab 3.2 - Lateness (H:M:S)`)   ) |>   #calculate Lab 1, Lab 2, Lab 3 category grades   dplyr::mutate(     `Lab 1` = (`Lab 1.1`*`Lab 1.1 - Max Points` + `Lab 1.2`*`Lab 1.2 - Max Points`)/(`Lab 1.1 - Max Points` + `Lab 1.2 - Max Points`),     `Lab 2` = (`Lab 2.1`*`Lab 2.1 - Max Points` + `Lab 2.2`*`Lab 2.2 - Max Points`)/(`Lab 2.1 - Max Points` + `Lab 2.2 - Max Points`),     `Lab 3` = (`Lab 3.1`*`Lab 3.1 - Max Points` + `Lab 3.2`*`Lab 3.2 - Max Points`)/(`Lab 3.1 - Max Points` + `Lab 3.2 - Max Points`)   ) script_grades <- lab_grades_with_lateness |>   # calculate category grade for \"Homework\"    dplyr::mutate(      `Labs` = rowMeans(one_drop(lab_grades_with_lateness))) |>   # calculate final Overall Grade   dplyr::mutate(`Overall Grade` = 0.4*`Labs` + 0.2*`Midterm Exam` + 0.4*`Final Exam`)"},{"path":[]},{"path":"https://gradebook-dev.github.io/gradebook/articles/detailed-canvas-export-info.html","id":"id-columns","dir":"Articles","previous_headings":"Grades.csv:","what":"ID Columns:","title":"Detailed Canvas Export Info","text":"Student - gives student name format Last, First (different Gradescope) ID - gives student’s Canvas ID. primary key Canvas thus best choice joining canvas dataframes SIS User ID - SIS name system Canvas interfaces individual university uses Canvas. example, Berkeley’s SIS CalCentral. confirmed Canvas Employees. Thus, SIS User ID student’s Cal ID university. Typically desired primary key operations outside Gradebook. Note , like Gradescope, SIS User ID contain entries form “UID: #####”. meaning entries unclear. SIS Login ID - meaning column unclear. appear relevant purposes. Section - communicates section student .","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/detailed-canvas-export-info.html","id":"assignment-columns","dir":"Articles","previous_headings":"Grades.csv:","what":"Assignment Columns:","title":"Detailed Canvas Export Info","text":"individual assignments Canvas grades csv contain name unique identifier ID number. example, columns contain assignment scores individual assignments form “Quiz 1 (87568490)”. , “Quiz 1” name visible students Canvas generates adds ID number. Also, note ID number added assignments originated Gradescope imported Canvas via API assignments created R script uploaded Canvas csv. number digits ID guaranteed.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/detailed-canvas-export-info.html","id":"category-columns","dir":"Articles","previous_headings":"Grades.csv:","what":"Category Columns:","title":"Detailed Canvas Export Info","text":"Since Canvas allows users generate aggregated categories, categories given just category name without ID appended. example, aggregated category Homework may column name “Homework Current Score”. columns may appear several variations information appended column name including “Current Score”, “Unposted Current Score”, “Final Score”, “Unposted Final Score” depending options chosen Canvas user. Category columns typically read-. Canvas grade csvs can also contain “Final Grade” column.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/detailed-canvas-export-info.html","id":"max-points","dir":"Articles","previous_headings":"Grades.csv:","what":"Max Points:","title":"Detailed Canvas Export Info","text":"Gradescope supplies maximum number points available assignment separate column assignment, Canvas grade csv gives row data frame. row maximum possible points can identified “ Points Possible” Student variable. space efficient, tidy data form needs converted Gradescope form.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/detailed-canvas-export-info.html","id":"other-information","dir":"Articles","previous_headings":"Grades.csv:","what":"Other Information:","title":"Detailed Canvas Export Info","text":"Canvas grade csv contain information assignments submitted assignment late. information partially supplied lateness.csv (discussed ). grade csv also contain email addresses (given roster.csv) Canvas appear use emails keys (IDs) students. also appear duplicated student rows Canvas outputs.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/detailed-canvas-export-info.html","id":"lateness-csv","dir":"Articles","previous_headings":"","what":"Lateness CSV:","title":"Detailed Canvas Export Info","text":"Information late assignments given CSV. row dataframe corresponds particular assignment submitted late particular student. Thus, particular assignment student can multiple rows dataframe. Thus, dataframe pivoted (tidyr::pivot_wider) format similar Gradescope.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/detailed-canvas-export-info.html","id":"columns","dir":"Articles","previous_headings":"Lateness CSV:","what":"Columns:","title":"Detailed Canvas Export Info","text":"Student Name - Student Column grades.csv Student ID - information “ID” column grades csv. student’s canvas ID. Course Name, Course ID, Section Name - self-explanatory useful. Assignment Name - name assignment submitted late. Points Possible - maximum number points assignment worth. Due Date - date assignment due. Unfortunately, provides due date provide time assignment due. issue calculating lateness (covered next). Submitted Date - date assignment submitted including exact time submission time zone. Graded Date - date time assignment graded including time zone. Posted Date - date time assignment grade posted students including time zone.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/detailed-canvas-export-info.html","id":"notes","dir":"Articles","previous_headings":"Lateness CSV:","what":"Notes:","title":"Detailed Canvas Export Info","text":"data wrangling, csv can aggregated grades csv add lateness submission time information, make csv similar Gradescope csv. However, lack due time information makes impossible calculate lateness error upper bound less 12 hours. current implementation assumes due time 12:00 due date (least generous students) assignments may marked 24 hours later really . example, class often quizzes due 9:30 (perhaps assignments due beginning lecture), student submitted 9:46 , thus marked 9 hours 46 minutes late assumption rather 16 minutes late. Note since assignments submitted late included csv, -assumption lateness applies assignments submitted late. example, quiz submitted 9:26 late csv thus given lateness processing. solution, command lateness available users uploading information Canvas since Canvas offers limited abilities apply simple late policies internally. applied, student’s score grades csv lateness applied. appears may possible obtain spreadsheet assignment due times using Canvas API (however may complicated). worth looking future Gradebook can accommodate applying lateness Canvas exported data.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/detailed-canvas-export-info.html","id":"roster-csv","dir":"Articles","previous_headings":"","what":"Roster CSV:","title":"Detailed Canvas Export Info","text":"CSV file contains information providing student email addresses case want add grading dataframe. row corresponds particular student course. contains following columns: Student Name - different format two CSVs. format “First Last” someone wrote name typical fashion. Student ID - Canvas internal ID student. Student SIS ID - CalCentral id. also contains examples “UID: xxxxxx” seemingly greater frequency CSVs. Email - column contains Student’s email address! Section Name - like CSVs.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/excusing-assignments.html","id":"what-does-it-mean-to-excuse-an-assignment","dir":"Articles","previous_headings":"","what":"What does it mean to “excuse” an assignment?","title":"Excusing Assignments","text":"instructor “excuses” assignment, equivalent allowing student drop assignment. means assignment counted towards student’s final grade. equivalent giving student 0 assignment. Excusing student assignment removes student’s score assignment’s points possible consideration student.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/excusing-assignments.html","id":"an-example","dir":"Articles","previous_headings":"What does it mean to “excuse” an assignment?","what":"An Example","title":"Excusing Assignments","text":"Mathematically, consider common scenario student’s grade equals number points student received assignments divided number points possible assignments. example, suppose category named Homework assignments HW 1, HW 2, HW 3. Suppose assignment worth 10 points student Jenny received 2, 6, 8 points homework respectively. Jenny receive homework score (2 + 6 + 8) / (10 + 10 + 10) = 8/15. example, suppose excused another student Timmy Homework 1. Timmy got 5 7 points homework 2 3, Timmy’s Homework score (5 + 7)/(10 + 10) = 0.6.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/excusing-assignments.html","id":"how-to-excuse-assignments","dir":"Articles","previous_headings":"","what":"How to Excuse Assignments","title":"Excusing Assignments","text":"notation excusing assignments molded around Canvas’s notation excusing assignments. Thus, Canvas users can simply excuse assignment Canvas Gradebook recognize assignment excused. Users grade aggregators wish excuse assignments set assignment’s score value “EX” excused Gradebook.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/excusing-assignments.html","id":"notes-on-the-interaction-between-excused-assignments-and-category-drops","dir":"Articles","previous_headings":"","what":"Notes on the Interaction between Excused Assignments and Category Drops","title":"Excusing Assignments","text":"addition excusing assignments, Gradebook users may also specify number drops drop student’s lowest n assignment scores specified category. Full details working drops available . working drops excused assignments, Gradebook constraint students must least one un-dropped un-excused assignments category. necessary retain 1 graded assignment, excused assignments category can lead fewer assignments dropped category n specified drop_n_lowest. corner case arise, warning raised informing instructors review student’s grades, case intentions different.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/excusing-assignments.html","id":"example","dir":"Articles","previous_headings":"Notes on the Interaction between Excused Assignments and Category Drops","what":"Example","title":"Excusing Assignments","text":"Consider following example involving Timmy. Imagine 4 assignments named Lab 1 4 2 drops syllabus labs. Suppose Timmy excused Lab 1 Lab 2. keep one Lab assignment grade remaining, can drop one Lab Timmy. Thus Timmy gets 1 drop rather 2 drops syllabus.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/excusing-assignments.html","id":"other-constraints-with-excused-assignments","dir":"Articles","previous_headings":"","what":"Other Constraints with Excused Assignments","title":"Excusing Assignments","text":"mentioned , every policy category must least one un-excused assignment students. student assignments excused category, Gradebook raise warning detailing student category. students situation, grade manually set running Gradebook.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/moderate-syllabus.html","id":"syllabus","dir":"Articles","previous_headings":"","what":"Syllabus","title":"Case Study: Moderate Syllabus","text":"final student’s grade computed 1) homework assignments, 2) midterm exam, 3) final exam. grade computed follows: Homework 1, Homework 2, Homework 3, Homework 4, Homework 5 assignments aggregated equally lowest 2 assignments dropped 10% reduction score, assignment submitted late within 24 hours deadline 30% reduction score, assignment submitted 24 hours deadline Midterm 40% Final Exam 40%","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/moderate-syllabus.html","id":"policy-file","dir":"Articles","previous_headings":"","what":"Policy File","title":"Case Study: Moderate Syllabus","text":"policy file looks like:","code":"coursewide:   course: Stat 101 Moderate Syllabus   description: This is the description for a course with moderate syllabus complexity    categories:   - category: Overall Grade     aggregation: weighted_mean     assignments:     - category: Homework       lateness:       - between:          from: '00:00:01'          to: '24:00:00'       - scale_by: 0.9       - after: '24:00:01'       - scale_by: 0.7       drop_n_lowest: 2       weight: 0.40       aggregation: equally_weighted       assignments:       - \"Homework 1\"       - \"Homework 2\"       - \"Homework 3\"       - \"Homework 4\"       - \"Homework 5\"     - category: Midterm       weight: 0.20       aggregation: none       assignments:       - \"Midterm Exam\"     - category: Final       weight: 0.40       aggregation: none       assignments:       - \"Final Exam\""},{"path":"https://gradebook-dev.github.io/gradebook/articles/moderate-syllabus.html","id":"gradescope-assigments-file","dir":"Articles","previous_headings":"","what":"Gradescope Assigments File","title":"Case Study: Moderate Syllabus","text":"Gradescope assignments file looks like:","code":"moderate_syllabus_data <- read_gs(system.file(\"extdata\", \"moderate_syllabus_data.csv\", package = \"gradebook\"))"},{"path":"https://gradebook-dev.github.io/gradebook/articles/moderate-syllabus.html","id":"workflow","dir":"Articles","previous_headings":"","what":"Workflow","title":"Case Study: Moderate Syllabus","text":"Overall grade calculated using three categories, weights shown ; represented Overall Grade aggregation weighted_mean. Midterm Final Exam categories contain single assignment, shown moderate_syllabus_data file, usually downloaded gradescope. Homework category compiled five assignments: “Homework 1”, “Homework 2”, “Homework 3”, “Homework 4”, “Homework 5” moderate_syllabus_data.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/moderate-syllabus.html","id":"grade-calculations","dir":"Articles","previous_headings":"Workflow","what":"Grade Calculations","title":"Case Study: Moderate Syllabus","text":"First, read YAML policy file. process_policy() checks formatting policy file. ,reconcile_policy_with_gs() checks compatibility Gradescope file (moderate_syllabus_data) policy file (policy). Finally, get_grades() grades assignments based policy file. output grades looks like:","code":"moderate_syllabus_data <- read_gs(system.file(\"extdata\", \"moderate_syllabus_data.csv\", package = \"gradebook\"))  policy <- read_policy(system.file(\"extdata\", \"moderate_syllabus.yaml\", package = \"gradebook\"))  grades <- get_grades(policy = policy, gs = moderate_syllabus_data)"},{"path":"https://gradebook-dev.github.io/gradebook/articles/moderate-syllabus.html","id":"syllabus-as-a-grading-script","dir":"Articles","previous_headings":"","what":"Syllabus as a Grading Script","title":"Case Study: Moderate Syllabus","text":"coded version syllabus. , can see, computations align.","code":"#function to convert HH:MM:SS into minutes convert_to_min <- function(hms){   purrr::map_vec(hms, function(time){     units <- stringr::str_split(time, pattern = \":\") |>       unlist() |>       as.numeric()     sum(units*c(60,1,1/60))   }) }  # function to implement lateness policy lateness_penalty <- function(score_vec, lateness_vec){   lateness <- convert_to_min(lateness_vec)   dplyr::case_when(     lateness == 0 ~ score_vec,     lateness <= 1440 ~ 0.9*score_vec,     .default = 0.7*score_vec   ) }  #function to drop lowest two grades two_drops <- function(data){   apply(dplyr::select(data, `Homework 1`, `Homework 2`, `Homework 3`, `Homework 4`,`Homework 5`), 1, function(x) sort(x, decreasing = TRUE)[1:3]) |> t() }  data_with_lateness <- moderate_syllabus_data |>   # calculate percentages   dplyr::mutate(     `Homework 1` = `Homework 1`/`Homework 1 - Max Points`,     `Homework 2` = `Homework 2`/`Homework 2 - Max Points`,     `Homework 3` = `Homework 3`/`Homework 3 - Max Points`,     `Homework 4` = `Homework 4`/`Homework 4 - Max Points`,     `Homework 5` = `Homework 5`/`Homework 5 - Max Points`,     `Midterm Exam` = `Midterm Exam`/`Midterm Exam - Max Points`,     `Final Exam` = `Final Exam`/`Final Exam - Max Points`   ) |>   #lateness   dplyr::mutate(     `Homework 1` = lateness_penalty(`Homework 1`,`Homework 1 - Lateness (H:M:S)`),     `Homework 2` = lateness_penalty(`Homework 2`,`Homework 2 - Lateness (H:M:S)`),     `Homework 3` = lateness_penalty(`Homework 3`,`Homework 3 - Lateness (H:M:S)`),     `Homework 4` = lateness_penalty(`Homework 4`,`Homework 4 - Lateness (H:M:S)`),     `Homework 5` = lateness_penalty(`Homework 5`,`Homework 5 - Lateness (H:M:S)`)   )  script_grades <- data_with_lateness |>   # calculate category grade for \"Homework\"    dplyr::mutate(      `Homework` = rowMeans(two_drops(data_with_lateness))) |>   # calculate final Overall Grade   dplyr::mutate(`Overall Grade` = 0.4*`Homework` + 0.2*`Midterm Exam` + 0.4*`Final Exam`)"},{"path":"https://gradebook-dev.github.io/gradebook/articles/moderate-syllabus.html","id":"disclaimers","dir":"Articles","previous_headings":"Syllabus as a Grading Script","what":"Disclaimers:","title":"Case Study: Moderate Syllabus","text":"weight category aggregation weighted_mean corresponding order assignments. Categories name assignment name.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/policy-files.html","id":"recognized-keys","dir":"Articles","previous_headings":"","what":"Recognized Keys","title":"Building a Policy File","text":"series recognized keys corresponding values. key represents certain type calculation syllabus, value determines specifics calculation.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/policy-files.html","id":"category","dir":"Articles","previous_headings":"Recognized Keys","what":"Category","title":"Building a Policy File","text":"Every single category must category key. name subcategory must unique category names assignment names.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/policy-files.html","id":"assignments","dir":"Articles","previous_headings":"Recognized Keys","what":"Assignments","title":"Building a Policy File","text":"assignments key determines assignments subcategories used determine category score. values key must match assignments Gradescope data subcategories determined policy file. left blank, category score factored grade calculations ignored (usually relevant computing grades middle semester assignments assigned /graded). Using get_assignments() give list assignments’ names within Gradescope file.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/policy-files.html","id":"score","dir":"Articles","previous_headings":"Recognized Keys","what":"Score","title":"Building a Policy File","text":"score key determines percentage assignment score calculated. moment, one valid value key: raw_over_max: percentage assignment score score assignment divided maximum points assignment. Note: score explicitly defined, default.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/policy-files.html","id":"aggregation","dir":"Articles","previous_headings":"Recognized Keys","what":"Aggregation","title":"Building a Policy File","text":"aggregation key determines various assignment scores aggregated together order calculate category score. corresponding values key: equally_weighted: category score average assignment scores regard relative point-values assignments. Note: aggregation explicitly defined, default. weighted_by_points: category score weighted average assignment scores weights determined relative point-values assignments. max_score: category score maximum assignment scores. min_score: category score minimum assignment scores. weighted_mean: category score weighted average assignment scores weights explicitly determined using weight key nested categories. Note: often reserved final overall-grade calculation. none: reserved category comprised one assignment; hence aggregation necessary category score simply assignment score. Note: category none aggregation multiple assignments, function defaults equally_weighted.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/policy-files.html","id":"lateness","dir":"Articles","previous_headings":"Recognized Keys","what":"Lateness","title":"Building a Policy File","text":"lateness key used write lateness policies. values key divided threshold functions penalty functions. Threshold functions determine valid lateness period penalty applied. possible threshold functions: : marks lateness-period including specified value. : marks lateness-period including two specified values. : marks lateness-period including specified value. possible penalty functions: add: add specified value assignment score assignment’s lateness falls within respective threshold. Note: often used give bonuses turning assignment -time. scale: scale assignment score specified factor assignment’s lateness falls within respective threshold. Note: often used reduce assignment score assignment turned late. set_to: set assignment score specified value assignment’s lateness falls within respective threshold. Note: often used set assignment score zero assignment turned late. See Case Study: Moderate Syllabus vignette view example lateness policy","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/policy-files.html","id":"drop-n-lowest","dir":"Articles","previous_headings":"Recognized Keys","what":"Drop N Lowest","title":"Building a Policy File","text":"drop_n_lowest key used drop n lowest assignments scores. n-value can take integer less total number assignments category. n bigger number assignments within category, highest assignment score returned.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/policy-files.html","id":"nesting","dir":"Articles","previous_headings":"","what":"Nesting","title":"Building a Policy File","text":"highest level category Overall Grade categories /assignments nested within. nested structure categories allows structured breakdown category syllabus. Using example , Overall Grade highest level nesting subcategories Labs, Discussion, Midterm Exam Final Exam. subcategories respective assignments nested within . Computations begin nested category level going levels toward Overall Grade.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/policy-files.html","id":"importance-of-order","dir":"Articles","previous_headings":"","what":"Importance of Order","title":"Building a Policy File","text":"Order operation crucial accurate computation final grades. computing grades, generally high level ordering following: lateness penalties, apply category drops drop_n_lowest, aggregation generally true syllabi. First, apply penalty lateness, drop lowest scoring assignments, finally apply aggregations assignments. example, take two separate orders computations Labs category, six assignments (e.g. Lab 1, Lab 2, etc.). drop 2 lowest scores. apply lateness penality: 10% reduction assignment day late setting score zero late. ’s dataframe used (gs_demo package): first computation apply lateness penalty first six assignments drop two lowest scores . second computation drop two lowest scores first apply lateness penalty four remaining assignments. computed scores Labs side--side: distinction doesn’t affect students, first student get distinctly different score, highlighing importance order creating policy files. ’s evident seemingly small distinctions can create significant effect, especially larger student bodies.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/simple-syllabus.html","id":"syllabus","dir":"Articles","previous_headings":"","what":"Syllabus","title":"Case Study: Simple Syllabus","text":"final student’s grade computed 1) homework assignments, 2) midterm 3) final exam. grade computed follows: Homework 1, Homework 2 (aggregated equally) Midterm 40% Final Exam 40%","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/simple-syllabus.html","id":"policy-file","dir":"Articles","previous_headings":"","what":"Policy File","title":"Case Study: Simple Syllabus","text":"policy file looks like:","code":"coursewide:   course: Stat 101 Simple Syllabus  categories:  - category: Overall Grade    aggregation: weighted_mean    assignments:    - category: Homework      weight: 0.20      aggregation: equally_weighted      assignments:      - \"Homework 1\"      - \"Homework 2\"    - category: Midterm      weight: 0.40      aggregation: none      assignments:      - \"Midterm Exam\"    - category: Final      weight: 0.40      aggregation: none      assignments:      - \"Final Exam\""},{"path":"https://gradebook-dev.github.io/gradebook/articles/simple-syllabus.html","id":"gradescope-assigments-file","dir":"Articles","previous_headings":"","what":"Gradescope Assigments File","title":"Case Study: Simple Syllabus","text":"Gradescope assignments file looks like:","code":"simple_syllabus_data <- read_gs(system.file(\"extdata\", \"simple_syllabus_data.csv\", package = \"gradebook\"))"},{"path":"https://gradebook-dev.github.io/gradebook/articles/simple-syllabus.html","id":"workflow","dir":"Articles","previous_headings":"","what":"Workflow","title":"Case Study: Simple Syllabus","text":"Overall grade calculated using three categories, weights shown ; represented Overall Grade aggregation weighted_mean. Midterm Final Exam categories contain single assignment, shown simple_syllabus_data file, usually downloaded Gradescope. Homework category compiled two assignments: “Homework 1” “Homework 2” simple_syllabus_data.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/simple-syllabus.html","id":"grade-calculations","dir":"Articles","previous_headings":"Workflow","what":"Grade Calculations","title":"Case Study: Simple Syllabus","text":"First, read YAML policy file. read_policy() read_gs() read respective files check correct formatting. Finally, get_grades() computes assignment grades based policy file. output grades looks like:","code":"simple_syllabus_data <- read_gs(system.file(\"extdata\", \"simple_syllabus_data.csv\", package = \"gradebook\"))  policy <- read_policy(system.file(\"extdata\", \"simple_syllabus.yaml\", package = \"gradebook\"))  grades <- get_grades(gs = simple_syllabus_data, policy = policy)"},{"path":"https://gradebook-dev.github.io/gradebook/articles/simple-syllabus.html","id":"syllabus-as-a-grading-script","dir":"Articles","previous_headings":"","what":"Syllabus as a Grading Script","title":"Case Study: Simple Syllabus","text":"coded version syllabus. , can see, computations align.","code":"script_grades <- simple_syllabus_data |>   # calculate percentages   dplyr::mutate(     `Homework 1` = `Homework 1`/`Homework 1 - Max Points`,     `Homework 2` = `Homework 2`/`Homework 2 - Max Points`,     `Midterm Exam` = `Midterm Exam`/`Midterm Exam - Max Points`,     `Final Exam` = `Final Exam`/`Final Exam - Max Points`   ) |>   # calculate category grade for \"Homework\"    dplyr::mutate( `Homework` = (`Homework 1` + `Homework 2`)/2 ) |>   # calculate final Overall Grade   dplyr::mutate(`Overall Grade` = 0.2*`Homework` + 0.4*`Midterm Exam` + 0.4*`Final Exam`)"},{"path":"https://gradebook-dev.github.io/gradebook/articles/simple-syllabus.html","id":"disclaimers","dir":"Articles","previous_headings":"Syllabus as a Grading Script","what":"Disclaimers:","title":"Case Study: Simple Syllabus","text":"weight category aggregation weighted_mean corresponding order assignments. Categories name assignment name.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/working-with-canvas-data.html","id":"getting-the-data","dir":"Articles","previous_headings":"","what":"Getting the Data","title":"Working With Canvas Data","text":"article details Gradebook workflows users use Canvas collect student assignment grades. use Gradebook, users must first source necessary csv files containing student assignment data Canvas. primary csv file needed Canvas grades file, contains assignment grades student. source file, navigate “Grades” tab Canvas. grades page, click “Export” “Export Entire Gradebook”. See image visual guidance.  grades csv file needed generate final grades Gradebook. Read information data can exported Canvas.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/working-with-canvas-data.html","id":"data-format","dir":"Articles","previous_headings":"","what":"Data Format","title":"Working With Canvas Data","text":"internal standard Gradebook data assignment data formatted like Gradescope data, another platform collecting student grades. Gradebook functionality converts Canvas assignment data internal standards seamless use Canvas data. use grade data Canvas, simply use read_files(); process unique Canvas data. Gradebook assesses source file (e.g. Gradescope, Canvas, ) load file appropriately. force file read Canvas sourced file, users can pass argument source = \"Canvas\" read_files() function. Gradebook track data originated prevent potentially dangerous operations grading. reading data, data can used calculate grades case study vignettes. example transformation Gradebook applies Canvas grade data. assignment grade data exported Canvas. dataframe transformed Gradebook.","code":"#> Rows: 11 Columns: 38 #> ── Column specification ────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (27): Student, SIS Login ID, Section, Assignments Current Score, A... #> dbl (11): ID, SIS User ID, HW 1 (8595677), HW 2 (8595678), HW 3 (85956... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 11 Columns: 38 #> ── Column specification ────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (27): Student, SIS Login ID, Section, Assignments Current Score, A... #> dbl (11): ID, SIS User ID, HW 1 (8595677), HW 2 (8595678), HW 3 (85956... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."},{"path":"https://gradebook-dev.github.io/gradebook/articles/working-with-canvas-data.html","id":"limitations","dir":"Articles","previous_headings":"","what":"Limitations","title":"Working With Canvas Data","text":"current implemention, limitations using assignment data sourced Canvas, resulting reduction potential grading functionality Gradebook. primary limitation surrounds application lateness policies using data sourced Canvas. grades csv exported Canvas include information assignment lateness. mentioned , Canvas also can export files detailing late assignments. However, lateness file omits time assignment due, making possible accurately calculate late late assignment . result, allow lateness policies used data sourced Canvas. Attempts raise error. Currently, recommendation Canvas users apply late policies Canvas, since Canvas can apply simple lateness policies.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/articles/working-with-canvas-data.html","id":"other-data","dir":"Articles","previous_headings":"","what":"Other Data","title":"Working With Canvas Data","text":"addition grades file, Canvas also exports information can relevant grade calculation. Examples include lateness csv file roster csv file. Integrating information two files currently supported. lateness file details assignments submitted late students. Due drawbacks mentioned , currently using file implement lateness penalties Gradebook. roster csv file gives student names contact information, can relevant instructors desire student contact information available exported grades file. files accessed “New Analytics” tab available right side course homepage. download files, click Analytics home page, navigate Reports tab download desired report. Reference photos .   Currently, providing files grades file supported Gradebook. However, built infrastructure read files future integration data sources (e.g. lateness roster csv files Canvas). full information formatting Canvas exported data, see Detailed Canvas Export Info vignette.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nikita Jayaprakash. Author, maintainer. Monika Voutov. Author. Andrew Bray. Author. Zachary Turner. Author.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jayaprakash N, Voutov M, Bray , Turner Z (2024). gradebook: Calculate course grades based assignment scores Gradescope Canvas description course grading policy. R package version 1.1.0, https://github.com/gradebook-dev/gradebook.","code":"@Manual{,   title = {gradebook: Calculate course grades based on assignment scores from Gradescope or Canvas and a description of the course grading policy},   author = {Nikita Jayaprakash and Monika Voutov and Andrew Bray and Zachary Turner},   year = {2024},   note = {R package version 1.1.0},   url = {https://github.com/gradebook-dev/gradebook}, }"},{"path":"https://gradebook-dev.github.io/gradebook/index.html","id":"gradebook","dir":"","previous_headings":"","what":"Calculate course grades based on assignment scores from Gradescope or Canvas and a description of the course grading policy","title":"Calculate course grades based on assignment scores from Gradescope or Canvas and a description of the course grading policy","text":"R package make course grade calculations easy, fast, importantly, correct. Course grades produced data frame assignment grades along grading policy file allows accurate systematic computations final course letter grades.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/index.html","id":"statement-of-need","dir":"","previous_headings":"","what":"Statement of Need","title":"Calculate course grades based on assignment scores from Gradescope or Canvas and a description of the course grading policy","text":"final grade end course elementary part college courses, computations grades quickly become deceptively intricate, especially larger STEM classes use various complexities accommodate diverse student body. Even though classes use slight variations policies, many learning management systems (LMS) sustain complex computations. response, courses turn hard-coded scripts. scripts quickly accumulate hundreds lines code, method assess accuracy final computation. Gradebook R package maintains structure complexity course grade guaranteeing accuracy comprehensive unit-testing. challenges consistency precision grading systems addressed applying practices data analysis principles software development. rigorous unit-testing package minimizes computational error reduces manual inputs, significantly lower risks typographic logical errors scripts. , course grades can computed accurately quickly: accuracy allows course instructors reliable grade computations, speed allows compute grades throughout semester order monitor student progress. structure package – open-source nature – allows courses contribute functionality unique course. R package also functions backend NemoGB Shiny app, lets user create grading policy file straightforward way.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/index.html","id":"installation-instructions","dir":"","previous_headings":"","what":"Installation Instructions","title":"Calculate course grades based on assignment scores from Gradescope or Canvas and a description of the course grading policy","text":"install gradebook, make sure install devtools first. pkgdown website version gradebook-dev.github.io/gradebook/.","code":"# install.packages(\"devtools\") devtools::install_github(\"gradebook-dev/gradebook\") library(gradebook)"},{"path":"https://gradebook-dev.github.io/gradebook/index.html","id":"example-usage","dir":"","previous_headings":"","what":"Example Usage","title":"Calculate course grades based on assignment scores from Gradescope or Canvas and a description of the course grading policy","text":"Load Gradescope data using read_gs(). Start building policy file reflects assignments Gradescope file structure syllabus. information guidance building policy file YAML format can found Building Policy File vignette. YAML policy file loaded read_policy(), course grades can computed get_grades().","code":"library(gradebook) gs_data <- read_gs(\"gs_demo.csv\") policy <- read_policy(\"policy_demo.yaml\")  grades <- get_grades(policy = policy, gs = gs_data)"},{"path":"https://gradebook-dev.github.io/gradebook/index.html","id":"community-guidelines","dir":"","previous_headings":"","what":"Community Guidelines","title":"Calculate course grades based on assignment scores from Gradescope or Canvas and a description of the course grading policy","text":"welcome contribution feedback others order make grading effective informative task course. Please review contributing guidelines. contributing project, agree abide guidelines.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/apply_slip_days.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply Slip Days — apply_slip_days","title":"Apply Slip Days — apply_slip_days","text":"function applies slip day policies within policy file.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/apply_slip_days.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply Slip Days — apply_slip_days","text":"","code":"apply_slip_days(gs, policy)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/apply_slip_days.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply Slip Days — apply_slip_days","text":"gs Gradescope dataframe policy grading policy file R list","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/apply_slip_days.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply Slip Days — apply_slip_days","text":"dataframe original Gradescope data lateness updated according slip day policies","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/apply_slip_days.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply Slip Days — apply_slip_days","text":"","code":"path <- system.file(\"extdata\", \"slip-days-policy-demo.yaml\", package = \"gradebook\") slip_days_policy_demo <- read_policy(path = path) apply_slip_days(gs = gs_demo, policy = slip_days_policy_demo) #> # A tibble: 10 × 45 #>    Names               Email     SID Sections `Lab 1` `Lab 1 - Max Points` #>    <chr>               <chr>   <dbl> <chr>      <dbl>                <dbl> #>  1 Dr. Kadin           Dr.Ka… 3.03e9 fake-cl…       9                   10 #>  2 Bartley Toy         Bartl… 3.03e9 fake-cl…       5                   10 #>  3 Dr. Dontae          Dr.Do… 3.03e9 fake-cl…      10                   10 #>  4 Narcissus Considine Narci… 3.03e9 fake-cl…      10                   10 #>  5 Verne Wilderman     Verne… 3.03e9 fake-cl…       8                   10 #>  6 Toivo Witting       Toivo… 3.03e9 fake-cl…       9                   10 #>  7 Tegan Crooks        Tegan… 3.03e9 fake-cl…       8                   10 #>  8 Tyrus Cremin-Wisozk Tyrus… 3.03e9 fake-cl…       2                   10 #>  9 Sydni Hansen        Sydni… 3.03e9 fake-cl…       8                   10 #> 10 Mrs. Chelsie        Mrs.C… 3.03e9 fake-cl…       5                   10 #> # ℹ 39 more variables: `Lab 1 - Submission Time` <chr>, #> #   `Lab 1 - Lateness (H:M:S)` <chr>, `Lab 2` <dbl>, #> #   `Lab 2 - Max Points` <dbl>, `Lab 2 - Submission Time` <chr>, #> #   `Lab 2 - Lateness (H:M:S)` <chr>, `Lab 3` <dbl>, #> #   `Lab 3 - Max Points` <dbl>, `Lab 3 - Submission Time` <chr>, #> #   `Lab 3 - Lateness (H:M:S)` <chr>, `Lab 4` <dbl>, #> #   `Lab 4 - Max Points` <dbl>, `Lab 4 - Submission Time` <chr>, …"},{"path":"https://gradebook-dev.github.io/gradebook/reference/calculate_grades.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Grades — calculate_grades","title":"Calculate Grades — calculate_grades","text":"function calculates grades based policy file. function called within get_grades() requires previous data processing. Note example essentially functionality get_grades().","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/calculate_grades.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Grades — calculate_grades","text":"","code":"calculate_grades(gs, policy)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/calculate_grades.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Grades — calculate_grades","text":"gs Gradescope dataframe policy grading policy file R list","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/calculate_grades.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Grades — calculate_grades","text":"dataframe original Gradescope data computed categories' scores appended additional columns","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/calculate_grades.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Grades — calculate_grades","text":"","code":"gs <- process_gs(gs = gs_demo) policy <- process_policy(policy = policy_demo, verbose = TRUE) policy <- reconcile_policy_with_gs(policy = policy, gs = gs_demo, verbose = TRUE) calculate_grades(gs = gs, policy = policy) #>                  Names                           Email        SID #> 1            Dr. Kadin           Dr.Kadin@berkeley.edu 3032412514 #> 2          Bartley Toy         BartleyToy@berkeley.edu 3032412515 #> 3           Dr. Dontae          Dr.Dontae@berkeley.edu 3032412516 #> 4  Narcissus Considine NarcissusConsidine@berkeley.edu 3032412517 #> 5      Verne Wilderman     VerneWilderman@berkeley.edu 3032412518 #> 6        Toivo Witting       ToivoWitting@berkeley.edu 3032412519 #> 7         Tegan Crooks        TeganCrooks@berkeley.edu 3032412520 #> 8  Tyrus Cremin-Wisozk TyrusCremin-Wisozk@berkeley.edu 3032412521 #> 9         Sydni Hansen        SydniHansen@berkeley.edu 3032412522 #> 10        Mrs. Chelsie        Mrs.Chelsie@berkeley.edu 3032412523 #>           Sections Lab 1 Lab 1 - Max Points Lab 1 - Submission Time #> 1  fake-class-2023   0.9                 10                       7 #> 2  fake-class-2023   0.5                 10                       5 #> 3  fake-class-2023   1.0                 10                       2 #> 4  fake-class-2023   1.0                 10                      10 #> 5  fake-class-2023   0.8                 10                       4 #> 6  fake-class-2023   0.9                 10                       6 #> 7  fake-class-2023   0.8                 10                       9 #> 8  fake-class-2023   0.2                 10                       3 #> 9  fake-class-2023   0.8                 10                       1 #> 10 fake-class-2023   0.5                 10                       8 #>    Lab 1 - Lateness (H:M:S) Lab 2 Lab 2 - Max Points #> 1                  00:00:00  0.25                 20 #> 2                  00:00:00  1.00                 20 #> 3                  00:00:00  0.60                 20 #> 4                  00:00:00  0.05                 20 #> 5                  00:00:00  0.50                 20 #> 6                  00:00:00  0.10                 20 #> 7                  11:25:51  0.55                 20 #> 8                  00:00:00  1.00                 20 #> 9                  00:00:00  0.15                 20 #> 10                 00:34:45  0.95                 20 #>    Lab 2 - Submission Time Lab 2 - Lateness (H:M:S)      Lab 3 #> 1                       10                 47:55:53 0.46666667 #> 2                        6                 00:00:00 0.06666667 #> 3                        7                 00:00:00 1.00000000 #> 4                        1                 00:00:00 0.53333333 #> 5                        3                 00:00:00 0.60000000 #> 6                        5                 00:00:00 0.60000000 #> 7                        9                 00:00:17 0.46666667 #> 8                        2                 00:00:00 0.60000000 #> 9                        8                 00:00:00 0.93333333 #> 10                       4                 00:00:00 1.00000000 #>    Lab 3 - Max Points Lab 3 - Submission Time Lab 3 - Lateness (H:M:S) #> 1                  15                       6                 00:00:00 #> 2                  15                       2                 00:00:00 #> 3                  15                       1                 00:00:00 #> 4                  15                      10                 08:57:32 #> 5                  15                       9                 14:59:55 #> 6                  15                       4                 00:00:00 #> 7                  15                       7                 00:00:00 #> 8                  15                       3                 00:00:00 #> 9                  15                       5                 00:00:00 #> 10                 15                       8                 13:12:53 #>    Lab 4 Lab 4 - Max Points Lab 4 - Submission Time #> 1    0.9                 10                       5 #> 2    0.5                 10                       9 #> 3    0.8                 10                       1 #> 4    0.6                 10                       3 #> 5    0.1                 10                      10 #> 6    1.0                 10                       6 #> 7    1.0                 10                       7 #> 8    0.3                 10                       8 #> 9    0.9                 10                       4 #> 10   0.2                 10                       2 #>    Lab 4 - Lateness (H:M:S) Lab 5 Lab 5 - Max Points #> 1                  00:00:00   0.0                  5 #> 2                  00:00:00   0.2                  5 #> 3                  00:00:00   0.6                  5 #> 4                  00:00:00   0.2                  5 #> 5                  14:10:40   0.8                  5 #> 6                  00:00:00   1.0                  5 #> 7                  00:00:00   0.8                  5 #> 8                  00:00:00   1.0                  5 #> 9                  00:00:00   1.0                  5 #> 10                 00:00:00   0.8                  5 #>    Lab 5 - Submission Time Lab 5 - Lateness (H:M:S) Lab 6 #> 1                        7                 00:00:00   0.4 #> 2                        2                 00:00:00   0.0 #> 3                        5                 00:00:00   0.6 #> 4                        3                 00:00:00   1.0 #> 5                        4                 00:00:00   0.0 #> 6                        8                 00:00:00   0.1 #> 7                        1                 00:00:00   0.4 #> 8                        6                 00:00:00   1.0 #> 9                        9                 00:00:00   0.3 #> 10                      10                 09:31:21   1.0 #>    Lab 6 - Max Points Lab 6 - Submission Time Lab 6 - Lateness (H:M:S) #> 1                  10                       3                 00:00:00 #> 2                  10                       2                 00:00:00 #> 3                  10                       1                 00:00:00 #> 4                  10                       4                 00:00:00 #> 5                  10                       9                 00:00:00 #> 6                  10                       6                 00:00:00 #> 7                  10                       5                 00:00:00 #> 8                  10                       7                 00:00:00 #> 9                  10                      10                 12:24:26 #> 10                 10                       8                 00:00:00 #>    Discussion 1 Discussion 1 - Max Points Discussion 1 - Submission Time #> 1          1.00                         4                              6 #> 2          1.00                         4                              4 #> 3          1.00                         4                              1 #> 4          0.75                         4                             10 #> 5          1.00                         4                              9 #> 6          1.00                         4                              2 #> 7          1.00                         4                              8 #> 8          1.00                         4                              3 #> 9          0.00                         4                              7 #> 10         0.75                         4                              5 #>    Discussion 1 - Lateness (H:M:S) Discussion 2 Discussion 2 - Max Points #> 1                  00:00:00.000000         1.00                         4 #> 2                  00:00:00.000000         1.00                         4 #> 3                  00:00:00.000000         0.75                         4 #> 4                  08:23:06.000000         1.00                         4 #> 5                  01:06:36.000000         0.75                         4 #> 6                  00:00:00.000000         1.00                         4 #> 7                  00:34:58.000000         0.75                         4 #> 8                  00:00:00.000000         1.00                         4 #> 9                  00:00:00.000000         1.00                         4 #> 10                 00:00:00.000000         1.00                         4 #>    Discussion 2 - Submission Time Discussion 2 - Lateness (H:M:S) Midterm #> 1                               2                        00:50:32  0.0176 #> 2                               5                        00:00:00  0.0000 #> 3                               4                        00:00:00  0.0068 #> 4                               6                        00:00:00  0.0060 #> 5                               3                        14:22:13  0.0032 #> 6                               9                        00:00:00  0.0124 #> 7                               1                        00:30:20  0.0116 #> 8                               7                        00:00:00  0.0016 #> 9                              10                        00:00:00  0.0016 #> 10                              8                        00:00:00  0.0188 #>    Midterm - Max Points Midterm - Submission Time #> 1                    50                         7 #> 2                    50                         3 #> 3                    50                         2 #> 4                    50                         6 #> 5                    50                        10 #> 6                    50                         9 #> 7                    50                         8 #> 8                    50                         5 #> 9                    50                         4 #> 10                   50                         1 #>    Midterm - Lateness (H:M:S)  Final Final - Max Points #> 1                    00:00:00 0.0010                100 #> 2                    00:00:00 0.0078                100 #> 3                    00:00:00 0.0024                100 #> 4                    00:00:00 0.0089                100 #> 5                    00:52:01 0.0097                100 #> 6                    00:00:00 0.0051                100 #> 7                    00:00:00 0.0058                100 #> 8                    00:00:00 0.0080                100 #> 9                    00:00:00 0.0083                100 #> 10                   00:00:00 0.0053                100 #>    Final - Submission Time Final - Lateness (H:M:S)        Labs #> 1                        4                 00:00:00 0.006938776 #> 2                        1                 00:00:00 0.006530612 #> 3                        8                 00:00:00 0.011020408 #> 4                        9                 00:00:00 0.007346939 #> 5                        5                 00:00:00 0.006530612 #> 6                        6                 00:00:00 0.007346939 #> 7                       10                 00:00:00 0.008979592 #> 8                        2                 00:00:00 0.010000000 #> 9                        7                 00:00:00 0.008571429 #> 10                       3                 00:00:00 0.011224490 #>    Labs - Max Points Labs - Lateness (H:M:S) Discussion #> 1                 70                47:55:53   0.125000 #> 2                 70                00:00:00   0.125000 #> 3                 70                00:00:00   0.109375 #> 4                 70                08:57:32   0.109375 #> 5                 70                14:59:55   0.109375 #> 6                 70                00:00:00   0.125000 #> 7                 70                11:25:51   0.109375 #> 8                 70                00:00:00   0.125000 #> 9                 70                12:24:26   0.062500 #> 10                70                13:12:53   0.109375 #>    Discussion - Max Points Discussion - Lateness (H:M:S) Midterm Exam #> 1                        8                      00:50:32         0.88 #> 2                        8                      00:00:00         0.00 #> 3                        8                      00:00:00         0.34 #> 4                        8                      08:23:06         0.30 #> 5                        8                      14:22:13         0.16 #> 6                        8                      00:00:00         0.62 #> 7                        8                      00:34:58         0.58 #> 8                        8                      00:00:00         0.08 #> 9                        8                      00:00:00         0.08 #> 10                       8                      00:00:00         0.94 #>    Midterm Exam - Max Points Midterm Exam - Lateness (H:M:S) Final Exam #> 1                         50                        00:00:00       0.10 #> 2                         50                        00:00:00       0.78 #> 3                         50                        00:00:00       0.24 #> 4                         50                        00:00:00       0.89 #> 5                         50                        00:52:01       0.97 #> 6                         50                        00:00:00       0.51 #> 7                         50                        00:00:00       0.58 #> 8                         50                        00:00:00       0.80 #> 9                         50                        00:00:00       0.83 #> 10                        50                        00:00:00       0.53 #>    Final Exam - Max Points Final Exam - Lateness (H:M:S) Overall Grade #> 1                      100                      00:00:00    0.02016163 #> 2                      100                      00:00:00    0.01679918 #> 3                      100                      00:00:00    0.01700362 #> 4                      100                      00:00:00    0.01761158 #> 5                      100                      00:00:00    0.01676668 #> 6                      100                      00:00:00    0.01995408 #> 7                      100                      00:00:00    0.01885138 #> 8                      100                      00:00:00    0.01838000 #> 9                      100                      00:00:00    0.01179143 #> 10                     100                      00:00:00    0.02153485 #>    Overall Grade - Max Points Overall Grade - Lateness (H:M:S) #> 1                         228                         47:55:53 #> 2                         228                         00:00:00 #> 3                         228                         00:00:00 #> 4                         228                         08:57:32 #> 5                         228                         14:59:55 #> 6                         228                         00:00:00 #> 7                         228                         11:25:51 #> 8                         228                         00:00:00 #> 9                         228                         12:24:26 #> 10                        228                         13:12:53"},{"path":"https://gradebook-dev.github.io/gradebook/reference/check_data_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Formatting of Grades Data — check_data_format","title":"Check Formatting of Grades Data — check_data_format","text":"functions checks column names throughout Grades data. must SID column least one assignment. also gives alert ID columns assignments data.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/check_data_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Formatting of Grades Data — check_data_format","text":"","code":"check_data_format(gs, verbose = FALSE)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/check_data_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Formatting of Grades Data — check_data_format","text":"gs Gradescope data frame verbose Whether print messages warnings","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/check_data_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Formatting of Grades Data — check_data_format","text":"gs dataframe errors.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/check_data_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Formatting of Grades Data — check_data_format","text":"","code":"check_data_format(gs_demo, verbose = TRUE) #> Important Message #> ℹ The ID columns from Gradescope are Names, Email, SID, and Sections #> Important Message #> ℹ The assignments from Gradescope are Discussion 1, Discussion 2, Final, Lab 1, Lab 2, Lab 3, Lab 4, Lab 5, Lab 6, and Midterm #> # A tibble: 10 × 44 #>    Names               Email     SID Sections `Lab 1` `Lab 1 - Max Points` #>    <chr>               <chr>   <dbl> <chr>      <dbl>                <dbl> #>  1 Dr. Kadin           Dr.Ka… 3.03e9 fake-cl…       9                   10 #>  2 Bartley Toy         Bartl… 3.03e9 fake-cl…       5                   10 #>  3 Dr. Dontae          Dr.Do… 3.03e9 fake-cl…      10                   10 #>  4 Narcissus Considine Narci… 3.03e9 fake-cl…      10                   10 #>  5 Verne Wilderman     Verne… 3.03e9 fake-cl…       8                   10 #>  6 Toivo Witting       Toivo… 3.03e9 fake-cl…       9                   10 #>  7 Tegan Crooks        Tegan… 3.03e9 fake-cl…       8                   10 #>  8 Tyrus Cremin-Wisozk Tyrus… 3.03e9 fake-cl…       2                   10 #>  9 Sydni Hansen        Sydni… 3.03e9 fake-cl…       8                   10 #> 10 Mrs. Chelsie        Mrs.C… 3.03e9 fake-cl…       5                   10 #> # ℹ 38 more variables: `Lab 1 - Submission Time` <chr>, #> #   `Lab 1 - Lateness (H:M:S)` <time>, `Lab 2` <dbl>, #> #   `Lab 2 - Max Points` <dbl>, `Lab 2 - Submission Time` <chr>, #> #   `Lab 2 - Lateness (H:M:S)` <time>, `Lab 3` <dbl>, #> #   `Lab 3 - Max Points` <dbl>, `Lab 3 - Submission Time` <chr>, #> #   `Lab 3 - Lateness (H:M:S)` <time>, `Lab 4` <dbl>, #> #   `Lab 4 - Max Points` <dbl>, `Lab 4 - Submission Time` <chr>, …"},{"path":"https://gradebook-dev.github.io/gradebook/reference/determine_grade_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict the source of grade dataframe. — determine_grade_source","title":"Predict the source of grade dataframe. — determine_grade_source","text":"function performs auto-determination grades dataframe sourced.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/determine_grade_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict the source of grade dataframe. — determine_grade_source","text":"","code":"determine_grade_source(grades_df)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/determine_grade_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict the source of grade dataframe. — determine_grade_source","text":"grades_df input Dataframe","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/determine_grade_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict the source of grade dataframe. — determine_grade_source","text":"string \"Canvas\", \"Gradescope\", \"Unrecognized\" determination.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/equally_weighted.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregation Functions — equally_weighted","title":"Aggregation Functions — equally_weighted","text":"collection functions compute aggregated scores category. equally_weighted() computes aggregated category score taking mean assignment scores weighted_by_points() computes aggregated category score taking weighted mean assignment scores using weights vector max_score() computes aggregated category score taking maximum assignment scores min_score() computes aggregated category score taking minimum assignment scores none() used one assignment category returns single score; otherwise defaults equally_weighted","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/equally_weighted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregation Functions — equally_weighted","text":"","code":"equally_weighted(grades_mat, category, assignments, weights = c())  weighted_by_points(grades_mat, category, assignments, weights = c())  max_score(grades_mat, category, assignments, weights = c())  min_score(grades_mat, category, assignments, weights = c())  weighted_mean(grades_mat, category, assignments, weights)  none(grades_mat, category, assignments, weights = c())"},{"path":"https://gradebook-dev.github.io/gradebook/reference/equally_weighted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregation Functions — equally_weighted","text":"grades_mat Matrix assignments + associated columns category category Category name assignments Assignment names category weights Weights weighted_mean, defaults NULL aggregation method","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/equally_weighted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregation Functions — equally_weighted","text":"matrix additional computation aggregated category score","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/flatten_policy.html","id":null,"dir":"Reference","previous_headings":"","what":"Flatten Policy File (","title":"Flatten Policy File (","text":"function reshapes policy file nested flat structure cycling top-level categories policy file un-nesting subcategories create single level list categories subcategories.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/flatten_policy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flatten Policy File (","text":"","code":"flatten_policy(policy)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/flatten_policy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flatten Policy File (","text":"policy valid policy file stored list.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/flatten_policy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flatten Policy File (","text":"single level list categories subcategories ordered leaves precede parent category list order.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/flatten_policy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flatten Policy File (","text":"","code":"flatten_policy(policy_demo) #> $coursewide #> $coursewide$course_name #> [1] \"Stat 101\" #>  #> $coursewide$description #> [1] \"syllabus for gs_demo\" #>  #>  #> $categories #> $categories[[1]] #> $categories[[1]]$category #> [1] \"Labs\" #>  #> $categories[[1]]$aggregation #> [1] \"weighted_by_points\" #>  #> $categories[[1]]$assignments #> [1] \"Lab 1\" \"Lab 2\" \"Lab 3\" \"Lab 4\" \"Lab 5\" \"Lab 6\" #>  #>  #> $categories[[2]] #> $categories[[2]]$category #> [1] \"Discussion\" #>  #> $categories[[2]]$aggregation #> [1] \"equally_weighted\" #>  #> $categories[[2]]$assignments #> [1] \"Discussion 1\" \"Discussion 2\" #>  #>  #> $categories[[3]] #> $categories[[3]]$category #> [1] \"Midterm Exam\" #>  #> $categories[[3]]$aggregation #> [1] \"none\" #>  #> $categories[[3]]$assignments #> [1] \"Midterm\" #>  #>  #> $categories[[4]] #> $categories[[4]]$category #> [1] \"Final Exam\" #>  #> $categories[[4]]$aggregation #> [1] \"none\" #>  #> $categories[[4]]$assignments #> [1] \"Final\" #>  #>  #> $categories[[5]] #> $categories[[5]]$category #> [1] \"Overall Grade\" #>  #> $categories[[5]]$aggregation #> [1] \"weighted_mean\" #>  #> $categories[[5]]$weights #> [1] 0.3 0.1 0.3 0.3 #>  #> $categories[[5]]$assignments #> [1] \"Labs\"       \"Discussion\" \"Midterm\"    \"Final\"      #>  #>  #>"},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_assignments.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Assignment Names for Gradescope Data — get_assignments","title":"Get the Assignment Names for Gradescope Data — get_assignments","text":"function identifies assignments Gradescope data returns assignments' names.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_assignments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Assignment Names for Gradescope Data — get_assignments","text":"","code":"get_assignments(gs, verbose = FALSE)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_assignments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the Assignment Names for Gradescope Data — get_assignments","text":"gs Gradescope dataframe verbose Whether print assignment names","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_assignments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Assignment Names for Gradescope Data — get_assignments","text":"vector names assignments dataframe","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_assignments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Assignment Names for Gradescope Data — get_assignments","text":"","code":"get_assignments(gs_demo, verbose = TRUE) #> Important Message #> ℹ The assignments from Gradescope are Discussion 1, Discussion 2, Final, Lab 1, Lab 2, Lab 3, Lab 4, Lab 5, Lab 6, and Midterm #>  [1] \"Discussion 1\" \"Discussion 2\" \"Final\"        \"Lab 1\"        #>  [5] \"Lab 2\"        \"Lab 3\"        \"Lab 4\"        \"Lab 5\"        #>  [9] \"Lab 6\"        \"Midterm\""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_categories.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Category Names for Policy — get_categories","title":"Get the Category Names for Policy — get_categories","text":"function identifies names categories policy list.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_categories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Category Names for Policy — get_categories","text":"","code":"get_categories(policy, verbose = FALSE)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_categories.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the Category Names for Policy — get_categories","text":"policy R list valid policy file verbose Whether return alert categories","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_categories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Category Names for Policy — get_categories","text":"vector names categories policy R list","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_categories.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Category Names for Policy — get_categories","text":"","code":"get_categories(policy_demo, verbose = TRUE) #> Important Message #> ℹ The categories from the policy are Labs, Discussion, Midterm Exam, Final Exam, and Overall Grade #> [1] \"Labs\"          \"Discussion\"    \"Midterm Exam\"  \"Final Exam\"    #> [5] \"Overall Grade\""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_category_grade.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate A Single Category Grade — get_category_grade","title":"Calculate A Single Category Grade — get_category_grade","text":"function calculates grade single category based policy file. Note function called within calculate_grades() used .","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_category_grade.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate A Single Category Grade — get_category_grade","text":"","code":"get_category_grade(grades_mat, policy_item)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_category_grade.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate A Single Category Grade — get_category_grade","text":"grades_mat Matrix assignments + associated columns category policy_item item policy file, grading criteria specific category","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_category_grade.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate A Single Category Grade — get_category_grade","text":"matrix single category's computed grades appended additional columns","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_grades.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Grades — get_grades","title":"Get Grades — get_grades","text":"function processes Gradescope data policy file, calculates grades based criteria policy file assignment scores Gradescope data. function assumes YAML policy file Gradescope .csv file read using read_policy() read_gs() functions respectively, check proper data format.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_grades.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Grades — get_grades","text":"","code":"get_grades(gs, policy, verbose = FALSE)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_grades.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Grades — get_grades","text":"gs Gradescope dataframe policy grading policy file R list verbose FALSE, throws error assignments found gs","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_grades.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Grades — get_grades","text":"dataframe original Gradescope data computed categories' scores appended additional columns","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_grades.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Grades — get_grades","text":"","code":"get_grades(gs = gs_demo, policy = policy_demo, verbose = TRUE) #> # A tibble: 10 × 59 #>    Names               Email   SID   Sections `Lab 1` `Lab 1 - Max Points` #>    <chr>               <chr>   <chr> <chr>      <dbl>                <dbl> #>  1 Dr. Kadin           Dr.Kad… 3032… fake-cl…     0.9                   10 #>  2 Bartley Toy         Bartle… 3032… fake-cl…     0.5                   10 #>  3 Dr. Dontae          Dr.Don… 3032… fake-cl…     1                     10 #>  4 Narcissus Considine Narcis… 3032… fake-cl…     1                     10 #>  5 Verne Wilderman     VerneW… 3032… fake-cl…     0.8                   10 #>  6 Toivo Witting       ToivoW… 3032… fake-cl…     0.9                   10 #>  7 Tegan Crooks        TeganC… 3032… fake-cl…     0.8                   10 #>  8 Tyrus Cremin-Wisozk TyrusC… 3032… fake-cl…     0.2                   10 #>  9 Sydni Hansen        SydniH… 3032… fake-cl…     0.8                   10 #> 10 Mrs. Chelsie        Mrs.Ch… 3032… fake-cl…     0.5                   10 #> # ℹ 53 more variables: `Lab 1 - Submission Time` <dbl>, #> #   `Lab 1 - Lateness (H:M:S)` <time>, `Lab 2` <dbl>, #> #   `Lab 2 - Max Points` <dbl>, `Lab 2 - Submission Time` <dbl>, #> #   `Lab 2 - Lateness (H:M:S)` <time>, `Lab 3` <dbl>, #> #   `Lab 3 - Max Points` <dbl>, `Lab 3 - Submission Time` <dbl>, #> #   `Lab 3 - Lateness (H:M:S)` <time>, `Lab 4` <dbl>, #> #   `Lab 4 - Max Points` <dbl>, `Lab 4 - Submission Time` <dbl>, …"},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_id_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the ID Columns for Gradescope Data — get_id_cols","title":"Get the ID Columns for Gradescope Data — get_id_cols","text":"function identifies ID columns Gradescope data.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_id_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the ID Columns for Gradescope Data — get_id_cols","text":"","code":"get_id_cols(gs, verbose = FALSE)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_id_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the ID Columns for Gradescope Data — get_id_cols","text":"gs Gradescope dataframe verbose Whether return alert assignments","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_id_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the ID Columns for Gradescope Data — get_id_cols","text":"vector names ID columns dataframe","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_id_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the ID Columns for Gradescope Data — get_id_cols","text":"","code":"get_id_cols(gs_demo, verbose = TRUE) #> Important Message #> ℹ The ID columns from Gradescope are Names, Email, SID, and Sections #> [1] \"Names\"    \"Email\"    \"SID\"      \"Sections\""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_nested_assignments.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Nested Assignments for Category — get_nested_assignments","title":"Get the Nested Assignments for Category — get_nested_assignments","text":"function identifies nested assignments given category.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_nested_assignments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Nested Assignments for Category — get_nested_assignments","text":"","code":"get_nested_assignments(category, verbose = FALSE)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_nested_assignments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the Nested Assignments for Category — get_nested_assignments","text":"category category policy R list verbose Whether return alert assignments","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_nested_assignments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Nested Assignments for Category — get_nested_assignments","text":"vector names nested assignments category","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/get_nested_assignments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Nested Assignments for Category — get_nested_assignments","text":"","code":"category <- policy_demo[[\"categories\"]][[1]] get_nested_assignments(category = category, verbose = TRUE) #> Important Message #> ℹ The assignments from the category Labs are Lab 1, Lab 2, Lab 3, Lab 4, Lab 5, and Lab 6 #> [1] \"Lab 1\" \"Lab 2\" \"Lab 3\" \"Lab 4\" \"Lab 5\" \"Lab 6\""},{"path":"https://gradebook-dev.github.io/gradebook/reference/gs_demo.html","id":null,"dir":"Reference","previous_headings":"","what":"Gradescope Demo Data — gs_demo","title":"Gradescope Demo Data — gs_demo","text":"example dataset mimics Gradescope format students rows assignment information across columns. assignments follow four-column format Lab 1, noted . Assignments gs_demo Lab 1, Lab 2, Lab 3, Lab 4, Lab 5, Lab 6, Discussion 1, Discussion 2, Midterm Final. columns follow format designated ID columns.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/gs_demo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gradescope Demo Data — gs_demo","text":"","code":"gs_demo"},{"path":[]},{"path":"https://gradebook-dev.github.io/gradebook/reference/gs_demo.html","id":"gs-demo","dir":"Reference","previous_headings":"","what":"gs_demo","title":"Gradescope Demo Data — gs_demo","text":"data frame 10 rows 44 columns: Names Student name Email Student email SID Student ID number Sections Student class section Lab 1 assignment called Lab 1 Lab 1 - Max Points Maximum possible points Lab 1 Lab 1 - Lateness (H:M:S) late Lab 1 turned , formatted HH:MM:SS Lab 1 - Submission Time Lab 1 turned , formatted MM/DD/YY HH:MM","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/gs_demo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gradescope Demo Data — gs_demo","text":"","code":"gs_demo #> # A tibble: 10 × 44 #>    Names               Email     SID Sections `Lab 1` `Lab 1 - Max Points` #>    <chr>               <chr>   <dbl> <chr>      <dbl>                <dbl> #>  1 Dr. Kadin           Dr.Ka… 3.03e9 fake-cl…       9                   10 #>  2 Bartley Toy         Bartl… 3.03e9 fake-cl…       5                   10 #>  3 Dr. Dontae          Dr.Do… 3.03e9 fake-cl…      10                   10 #>  4 Narcissus Considine Narci… 3.03e9 fake-cl…      10                   10 #>  5 Verne Wilderman     Verne… 3.03e9 fake-cl…       8                   10 #>  6 Toivo Witting       Toivo… 3.03e9 fake-cl…       9                   10 #>  7 Tegan Crooks        Tegan… 3.03e9 fake-cl…       8                   10 #>  8 Tyrus Cremin-Wisozk Tyrus… 3.03e9 fake-cl…       2                   10 #>  9 Sydni Hansen        Sydni… 3.03e9 fake-cl…       8                   10 #> 10 Mrs. Chelsie        Mrs.C… 3.03e9 fake-cl…       5                   10 #> # ℹ 38 more variables: `Lab 1 - Submission Time` <chr>, #> #   `Lab 1 - Lateness (H:M:S)` <time>, `Lab 2` <dbl>, #> #   `Lab 2 - Max Points` <dbl>, `Lab 2 - Submission Time` <chr>, #> #   `Lab 2 - Lateness (H:M:S)` <time>, `Lab 3` <dbl>, #> #   `Lab 3 - Max Points` <dbl>, `Lab 3 - Submission Time` <chr>, #> #   `Lab 3 - Lateness (H:M:S)` <time>, `Lab 4` <dbl>, #> #   `Lab 4 - Max Points` <dbl>, `Lab 4 - Submission Time` <chr>, …"},{"path":"https://gradebook-dev.github.io/gradebook/reference/mean_lateness.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregation for Lateness Functions — mean_lateness","title":"Aggregation for Lateness Functions — mean_lateness","text":"collection functions computes lateness category. mean_lateness() computes aggregated lateness category taking mean lateness category's assignments sum_lateness() computes aggregated lateness category taking sum lateness category's assignments max_lateness() computes aggregated lateness category taking maximum lateness category's assignments","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/mean_lateness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregation for Lateness Functions — mean_lateness","text":"","code":"mean_lateness(grades_mat, category, assignments)  sum_lateness(grades_mat, category, assignments)  max_lateness(grades_mat, category, assignments)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/mean_lateness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregation for Lateness Functions — mean_lateness","text":"grades_mat Matrix assignments + associated columns category category Category name assignments Assignment names category","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/mean_lateness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregation for Lateness Functions — mean_lateness","text":"matrix aggregated lateness category","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/policy_demo.html","id":null,"dir":"Reference","previous_headings":"","what":"Policy Demo File — policy_demo","title":"Policy Demo File — policy_demo","text":"example policy file mimics hypothetical class syllabus. Note minimal policy file, information specific grading criteria can found via vignettes.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/policy_demo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Policy Demo File — policy_demo","text":"","code":"policy_demo"},{"path":"https://gradebook-dev.github.io/gradebook/reference/policy_demo.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Policy Demo File — policy_demo","text":"list two nested lists COURSEWIDE First nested list general information class course_name Name course, saved string description relevant course description, purely user, also saved single string CATEGORIES Second nested list syllabus broken categories respective grading criteria category Category name aggregation assignment scores aggregated calculate category score assignments List assignment names fall category","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/policy_demo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Policy Demo File — policy_demo","text":"","code":"policy_demo #> $coursewide #> $coursewide$course_name #> [1] \"Stat 101\" #>  #> $coursewide$description #> [1] \"syllabus for gs_demo\" #>  #>  #> $categories #> $categories[[1]] #> $categories[[1]]$category #> [1] \"Labs\" #>  #> $categories[[1]]$aggregation #> [1] \"weighted_by_points\" #>  #> $categories[[1]]$assignments #> [1] \"Lab 1\" \"Lab 2\" \"Lab 3\" \"Lab 4\" \"Lab 5\" \"Lab 6\" #>  #>  #> $categories[[2]] #> $categories[[2]]$category #> [1] \"Discussion\" #>  #> $categories[[2]]$aggregation #> [1] \"equally_weighted\" #>  #> $categories[[2]]$assignments #> [1] \"Discussion 1\" \"Discussion 2\" #>  #>  #> $categories[[3]] #> $categories[[3]]$category #> [1] \"Midterm Exam\" #>  #> $categories[[3]]$aggregation #> [1] \"none\" #>  #> $categories[[3]]$assignments #> [1] \"Midterm\" #>  #>  #> $categories[[4]] #> $categories[[4]]$category #> [1] \"Final Exam\" #>  #> $categories[[4]]$aggregation #> [1] \"none\" #>  #> $categories[[4]]$assignments #> [1] \"Final\" #>  #>  #> $categories[[5]] #> $categories[[5]]$category #> [1] \"Overall Grade\" #>  #> $categories[[5]]$aggregation #> [1] \"weighted_mean\" #>  #> $categories[[5]]$weights #> [1] 0.3 0.1 0.3 0.3 #>  #> $categories[[5]]$assignments #> [1] \"Labs\"       \"Discussion\" \"Midterm\"    \"Final\"      #>  #>  #>"},{"path":"https://gradebook-dev.github.io/gradebook/reference/process_gs.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Gradescope Data — process_gs","title":"Process Gradescope Data — process_gs","text":"function processes Gradescope data grading. Ungraded assignments (.e. assignments NAs scores) can optionally dropped. Eventually, also merge duplicated students deal students SID.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/process_gs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Gradescope Data — process_gs","text":"","code":"process_gs(gs, drop_ungraded = TRUE, verbose = FALSE)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/process_gs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Gradescope Data — process_gs","text":"gs Gradescope dataframe students rows assignment information across columns. drop_ungraded Whether drop ungraded assignments verbose Whether print messages warnings","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/process_gs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Gradescope Data — process_gs","text":"Gradescope dataframe, optionally ungraded assignments removed","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/process_gs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process Gradescope Data — process_gs","text":"","code":"process_gs(gs = gs_demo, drop_ungraded = TRUE, verbose = TRUE) #> Important Message #> ℹ These are no ungraded assignments #> # A tibble: 10 × 44 #>    Names               Email     SID Sections `Lab 1` `Lab 1 - Max Points` #>    <chr>               <chr>   <dbl> <chr>      <dbl>                <dbl> #>  1 Dr. Kadin           Dr.Ka… 3.03e9 fake-cl…       9                   10 #>  2 Bartley Toy         Bartl… 3.03e9 fake-cl…       5                   10 #>  3 Dr. Dontae          Dr.Do… 3.03e9 fake-cl…      10                   10 #>  4 Narcissus Considine Narci… 3.03e9 fake-cl…      10                   10 #>  5 Verne Wilderman     Verne… 3.03e9 fake-cl…       8                   10 #>  6 Toivo Witting       Toivo… 3.03e9 fake-cl…       9                   10 #>  7 Tegan Crooks        Tegan… 3.03e9 fake-cl…       8                   10 #>  8 Tyrus Cremin-Wisozk Tyrus… 3.03e9 fake-cl…       2                   10 #>  9 Sydni Hansen        Sydni… 3.03e9 fake-cl…       8                   10 #> 10 Mrs. Chelsie        Mrs.C… 3.03e9 fake-cl…       5                   10 #> # ℹ 38 more variables: `Lab 1 - Submission Time` <chr>, #> #   `Lab 1 - Lateness (H:M:S)` <time>, `Lab 2` <dbl>, #> #   `Lab 2 - Max Points` <dbl>, `Lab 2 - Submission Time` <chr>, #> #   `Lab 2 - Lateness (H:M:S)` <time>, `Lab 3` <dbl>, #> #   `Lab 3 - Max Points` <dbl>, `Lab 3 - Submission Time` <chr>, #> #   `Lab 3 - Lateness (H:M:S)` <time>, `Lab 4` <dbl>, #> #   `Lab 4 - Max Points` <dbl>, `Lab 4 - Submission Time` <chr>, …"},{"path":"https://gradebook-dev.github.io/gradebook/reference/process_policy.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Policy File — process_policy","title":"Process Policy File — process_policy","text":"function processes policy file order compute grades flattens nested structure file.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/process_policy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Policy File — process_policy","text":"","code":"process_policy(policy, verbose = FALSE)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/process_policy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Policy File — process_policy","text":"policy R list valid policy file verbose Whether print messages warnings","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/process_policy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Policy File — process_policy","text":"(un-nested) flattened policy R list","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/process_policy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process Policy File — process_policy","text":"","code":"process_policy(policy_demo, verbose = TRUE) #> $coursewide #> $coursewide$course_name #> [1] \"Stat 101\" #>  #> $coursewide$description #> [1] \"syllabus for gs_demo\" #>  #>  #> $categories #> $categories[[1]] #> $categories[[1]]$category #> [1] \"Labs\" #>  #> $categories[[1]]$aggregation #> [1] \"weighted_by_points\" #>  #> $categories[[1]]$assignments #> [1] \"Lab 1\" \"Lab 2\" \"Lab 3\" \"Lab 4\" \"Lab 5\" \"Lab 6\" #>  #>  #> $categories[[2]] #> $categories[[2]]$category #> [1] \"Discussion\" #>  #> $categories[[2]]$aggregation #> [1] \"equally_weighted\" #>  #> $categories[[2]]$assignments #> [1] \"Discussion 1\" \"Discussion 2\" #>  #>  #> $categories[[3]] #> $categories[[3]]$category #> [1] \"Midterm Exam\" #>  #> $categories[[3]]$aggregation #> [1] \"none\" #>  #> $categories[[3]]$assignments #> [1] \"Midterm\" #>  #>  #> $categories[[4]] #> $categories[[4]]$category #> [1] \"Final Exam\" #>  #> $categories[[4]]$aggregation #> [1] \"none\" #>  #> $categories[[4]]$assignments #> [1] \"Final\" #>  #>  #> $categories[[5]] #> $categories[[5]]$category #> [1] \"Overall Grade\" #>  #> $categories[[5]]$aggregation #> [1] \"weighted_mean\" #>  #> $categories[[5]]$weights #> [1] 0.3 0.1 0.3 0.3 #>  #> $categories[[5]]$assignments #> [1] \"Labs\"       \"Discussion\" \"Midterm\"    \"Final\"      #>  #>  #>"},{"path":"https://gradebook-dev.github.io/gradebook/reference/raw_over_max.html","id":null,"dir":"Reference","previous_headings":"","what":"Score Functions — raw_over_max","title":"Score Functions — raw_over_max","text":"collection functions calculate percentage score save back column assignment score raw_over_max() computes score dividing original assignment score maximum possible points assignment","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/raw_over_max.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Score Functions — raw_over_max","text":"","code":"raw_over_max(grades_mat, assignments)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/raw_over_max.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Score Functions — raw_over_max","text":"grades_mat Matrix assignments + associated columns category assignments Assignment names category","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/raw_over_max.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Score Functions — raw_over_max","text":"matrix computed assignment scores","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/read_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in File(s) from Grading Platform(s) — read_files","title":"Read in File(s) from Grading Platform(s) — read_files","text":"function read input data Gradebook.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/read_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in File(s) from Grading Platform(s) — read_files","text":"","code":"read_files(grades_path, other_file_paths = list(), source = \"auto\")"},{"path":"https://gradebook-dev.github.io/gradebook/reference/read_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in File(s) from Grading Platform(s) — read_files","text":"grades_path path csv containing graded assignments. other_file_paths list containing filepaths desired read . name designated type file. example, \"lateness\" \"roster\" value filepath. source Determines read grade file. default, auto Gradebook can determine format file . Alternatively, users can specify \"Gradescope\" \"Canvas\" force certain interpretations.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/read_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in File(s) from Grading Platform(s) — read_files","text":"dataframe grades. Later support files returned list well.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/read_gs.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Gradescope CSV File — read_gs","title":"Read Gradescope CSV File — read_gs","text":"functions reads Gradescope CSV file checks correct Gradescope format. assignment follow four-column format: Assignment Name, Assignment Name - Max Points, Assignment Name - Submission Time, Assignment Name - Lateness (H:M:S). columns designed ID columns. Now favored use read_files. function left backwards-compatibility.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/read_gs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Gradescope CSV File — read_gs","text":"","code":"read_gs(path, verbose = FALSE)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/read_gs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Gradescope CSV File — read_gs","text":"path Path Gradescope CSV verbose whether print messages","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/read_gs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Gradescope CSV File — read_gs","text":"dataframe Gradescope CSV file, errors","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/read_gs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Gradescope CSV File — read_gs","text":"","code":"path <- system.file(\"extdata\", \"gs_demo.csv\", package = \"gradebook\") read_gs(path = path) #> Rows: 10 Columns: 44 #> ── Column specification ────────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (13): Names, Email, Sections, Lab 1 - Submission Time, Lab 2 - Su... #> dbl  (21): SID, Lab 1, Lab 1 - Max Points, Lab 2, Lab 2 - Max Points, ... #> time (10): Lab 1 - Lateness (H:M:S), Lab 2 - Lateness (H:M:S), Lab 3 -... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."},{"path":"https://gradebook-dev.github.io/gradebook/reference/read_policy.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Grading Policy .yml — read_policy","title":"Read Grading Policy .yml — read_policy","text":"functions reads grading policy YAML file checks correct format","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/read_policy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Grading Policy .yml — read_policy","text":"","code":"read_policy(path, verbose = FALSE)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/read_policy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Grading Policy .yml — read_policy","text":"path Path YAML policy file verbose Whether print messages warnings","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/read_policy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Grading Policy .yml — read_policy","text":"R list policy file, errors","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/read_policy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Grading Policy .yml — read_policy","text":"","code":"path <- system.file(\"extdata\", \"policy_demo.yaml\", package = \"gradebook\") read_policy(path = path, verbose = TRUE) #> $coursewide #> $coursewide$course_name #> [1] \"Stat 101\" #>  #> $coursewide$description #> [1] \"Syllabus for gs_demo\" #>  #>  #> $categories #> $categories[[1]] #> $categories[[1]]$category #> [1] \"Overall Grade\" #>  #> $categories[[1]]$aggregation #> [1] \"weighted_mean\" #>  #> $categories[[1]]$assignments #> $categories[[1]]$assignments[[1]] #> $categories[[1]]$assignments[[1]]$category #> [1] \"Labs\" #>  #> $categories[[1]]$assignments[[1]]$aggregation #> [1] \"weighted_by_points\" #>  #> $categories[[1]]$assignments[[1]]$weight #> [1] 0.3 #>  #> $categories[[1]]$assignments[[1]]$assignments #> [1] \"Lab 1\" \"Lab 2\" \"Lab 3\" \"Lab 4\" \"Lab 5\" \"Lab 6\" #>  #>  #> $categories[[1]]$assignments[[2]] #> $categories[[1]]$assignments[[2]]$category #> [1] \"Discussion\" #>  #> $categories[[1]]$assignments[[2]]$aggregation #> [1] \"equally_weighted\" #>  #> $categories[[1]]$assignments[[2]]$weight #> [1] 0.1 #>  #> $categories[[1]]$assignments[[2]]$assignments #> [1] \"Discussion 1\" \"Discussion 2\" #>  #>  #> $categories[[1]]$assignments[[3]] #> $categories[[1]]$assignments[[3]]$category #> [1] \"Midterm Exam\" #>  #> $categories[[1]]$assignments[[3]]$aggregation #> [1] \"none\" #>  #> $categories[[1]]$assignments[[3]]$weight #> [1] 0.3 #>  #> $categories[[1]]$assignments[[3]]$assignments #> [1] \"Midterm\" #>  #>  #> $categories[[1]]$assignments[[4]] #> $categories[[1]]$assignments[[4]]$category #> [1] \"Final Exam\" #>  #> $categories[[1]]$assignments[[4]]$aggregation #> [1] \"none\" #>  #> $categories[[1]]$assignments[[4]]$weight #> [1] 0.3 #>  #> $categories[[1]]$assignments[[4]]$assignments #> [1] \"Final\" #>  #>  #>  #>  #>"},{"path":"https://gradebook-dev.github.io/gradebook/reference/reconcile_policy_with_gs.html","id":null,"dir":"Reference","previous_headings":"","what":"Reconcile Policy File with Gradescope Data — reconcile_policy_with_gs","title":"Reconcile Policy File with Gradescope Data — reconcile_policy_with_gs","text":"function drops assignments present policy file Gradescope data, making sure policy file Gradescope data compatible. function also sets default values explicitly specified policy file required grading.","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/reconcile_policy_with_gs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reconcile Policy File with Gradescope Data — reconcile_policy_with_gs","text":"","code":"reconcile_policy_with_gs(policy, gs, verbose = FALSE)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/reconcile_policy_with_gs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reconcile Policy File with Gradescope Data — reconcile_policy_with_gs","text":"policy R list valid policy file gs Gradescope data verbose Whether print messages; FALSE, still throws error assignments found gs","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/reconcile_policy_with_gs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reconcile Policy File with Gradescope Data — reconcile_policy_with_gs","text":"policy list","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/reconcile_policy_with_gs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reconcile Policy File with Gradescope Data — reconcile_policy_with_gs","text":"","code":"reconcile_policy_with_gs(policy = policy_demo, gs = gs_demo, verbose = TRUE) #> $coursewide #> $coursewide$course_name #> [1] \"Stat 101\" #>  #> $coursewide$description #> [1] \"syllabus for gs_demo\" #>  #>  #> $categories #> $categories[[1]] #> $categories[[1]]$category #> [1] \"Labs\" #>  #> $categories[[1]]$score #> [1] \"raw_over_max\" #>  #> $categories[[1]]$aggregation #> [1] \"weighted_by_points\" #>  #> $categories[[1]]$assignments #> [1] \"Lab 1\" \"Lab 2\" \"Lab 3\" \"Lab 4\" \"Lab 5\" \"Lab 6\" #>  #> $categories[[1]]$aggregation_max_pts #> [1] \"sum_max_pts\" #>  #> $categories[[1]]$aggregation_lateness #> [1] \"max_lateness\" #>  #>  #> $categories[[2]] #> $categories[[2]]$category #> [1] \"Discussion\" #>  #> $categories[[2]]$score #> [1] \"raw_over_max\" #>  #> $categories[[2]]$aggregation #> [1] \"equally_weighted\" #>  #> $categories[[2]]$assignments #> [1] \"Discussion 1\" \"Discussion 2\" #>  #> $categories[[2]]$aggregation_max_pts #> [1] \"sum_max_pts\" #>  #> $categories[[2]]$aggregation_lateness #> [1] \"max_lateness\" #>  #>  #> $categories[[3]] #> $categories[[3]]$category #> [1] \"Midterm Exam\" #>  #> $categories[[3]]$score #> [1] \"raw_over_max\" #>  #> $categories[[3]]$aggregation #> [1] \"none\" #>  #> $categories[[3]]$assignments #> [1] \"Midterm\" #>  #> $categories[[3]]$aggregation_max_pts #> [1] \"sum_max_pts\" #>  #> $categories[[3]]$aggregation_lateness #> [1] \"max_lateness\" #>  #>  #> $categories[[4]] #> $categories[[4]]$category #> [1] \"Final Exam\" #>  #> $categories[[4]]$score #> [1] \"raw_over_max\" #>  #> $categories[[4]]$aggregation #> [1] \"none\" #>  #> $categories[[4]]$assignments #> [1] \"Final\" #>  #> $categories[[4]]$aggregation_max_pts #> [1] \"sum_max_pts\" #>  #> $categories[[4]]$aggregation_lateness #> [1] \"max_lateness\" #>  #>  #> $categories[[5]] #> $categories[[5]]$category #> [1] \"Overall Grade\" #>  #> $categories[[5]]$score #> [1] \"raw_over_max\" #>  #> $categories[[5]]$aggregation #> [1] \"weighted_mean\" #>  #> $categories[[5]]$weights #> [1] 0.3 0.1 0.3 0.3 #>  #> $categories[[5]]$assignments #> [1] \"Labs\"       \"Discussion\" \"Midterm\"    \"Final\"      #>  #> $categories[[5]]$aggregation_max_pts #> [1] \"sum_max_pts\" #>  #> $categories[[5]]$aggregation_lateness #> [1] \"max_lateness\" #>  #>  #>"},{"path":"https://gradebook-dev.github.io/gradebook/reference/score.html","id":null,"dir":"Reference","previous_headings":"","what":"Key Functions — score","title":"Key Functions — score","text":"collection functions correspond keys used policy YAML file: function/key corresponds specific cluster grading functionality. score() computes percentage score saves back column original assignment score aggregation() computes category score aggregating associated assignment scores lateness() applies relevant lateness penalty within given thresholds drop_n_lowest() drops n lowest assignment scores; n >= num assignments, returns highest assignment score aggregation_max_pts() computes maximum possible points category aggregation_lateness() computes aggregated lateness category","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Key Functions — score","text":"","code":"score(grades_mat, policy_line, category, assignments, weights = c())  aggregation(grades_mat, policy_line, category, assignments, weights = c())  lateness(grades_mat, policy_line, category, assignments, weights = c())  drop_n_lowest(grades_mat, policy_line, category, assignments, weights = c())  aggregation_max_pts(   grades_mat,   policy_line,   category,   assignments,   weights = c() )  aggregation_lateness(   grades_mat,   policy_line,   category,   assignments,   weights = c() )"},{"path":"https://gradebook-dev.github.io/gradebook/reference/score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Key Functions — score","text":"grades_mat Matrix assignments + associated columns category policy_line Policy list item key category Category name assignments Assignment names category vector weights Weights weighted_mean vector","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Key Functions — score","text":"matrix additional computation relevant key function","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/sum_max_pts.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregation for Maximum Possible Points Functions — sum_max_pts","title":"Aggregation for Maximum Possible Points Functions — sum_max_pts","text":"collection functions compute maximum possible points category sum_max_pts() computes maximum possible points category sum maximum points assignment within category mean_max_pts() computes maximum possible points category average maximum points assignment within category","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/sum_max_pts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregation for Maximum Possible Points Functions — sum_max_pts","text":"","code":"sum_max_pts(grades_mat, category, assignments)  mean_max_pts(grades_mat, category, assignments)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/sum_max_pts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregation for Maximum Possible Points Functions — sum_max_pts","text":"grades_mat Matrix assignments + associated columns category category Category name assignments Assignment names category","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/sum_max_pts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregation for Maximum Possible Points Functions — sum_max_pts","text":"matrix additional computation maximum possible points category","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/until.html","id":null,"dir":"Reference","previous_headings":"","what":"Lateness Functions — until","title":"Lateness Functions — until","text":"collection functions apply lateness policies lateness assignment falls within specified threshold () determines lateness assignments less equal late_policy () determines lateness assignments late_policy () determines lateness assignments equal late_policy add() adds late_policy score lateness assignments within threshold (Note: positive value late_policy increase score assignment) scale_by() scales score late_policy lateness assignments within threshold set_to() sets score late_policy lateness assignments within threshold","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/until.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lateness Functions — until","text":"","code":"until(grades_mat, late_policy, original_late_mat, assignments)  add(grades_mat, late_policy, original_late_mat, assignments)  between(grades_mat, late_policy, original_late_mat, assignments)  scale_by(grades_mat, late_policy, original_late_mat, assignments)  after(grades_mat, late_policy, original_late_mat, assignments)  set_to(grades_mat, late_policy, original_late_mat, assignments)"},{"path":"https://gradebook-dev.github.io/gradebook/reference/until.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lateness Functions — until","text":"grades_mat Matrix assignments + associated columns category late_policy Relevant threshold/scalar lateness policy original_late_mat Matrix saves original lateness values assignments Assignment names category","code":""},{"path":"https://gradebook-dev.github.io/gradebook/reference/until.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lateness Functions — until","text":"matrix lateness penalties applied score category's assignments","code":""}]
